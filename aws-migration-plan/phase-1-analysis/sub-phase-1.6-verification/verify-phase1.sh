#!/bin/bash
# MisterSmith Phase 1 Comprehensive Verification Script
# Generated by MS-3 Verification Specialist Agent
# Date: 2025-07-11

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Verification results
PASSED=0
FAILED=0
WARNINGS=0

# Helper functions
log_pass() {
    echo -e "${GREEN}✅ PASS${NC}: $1"
    ((PASSED++))
}

log_fail() {
    echo -e "${RED}❌ FAIL${NC}: $1"
    ((FAILED++))
}

log_warn() {
    echo -e "${YELLOW}⚠️  WARN${NC}: $1"
    ((WARNINGS++))
}

log_info() {
    echo -e "ℹ️  INFO: $1"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

echo "=========================================="
echo "MisterSmith Phase 1 Verification Suite"
echo "=========================================="
echo ""

# 1. DEPENDENCIES VERIFICATION
echo "1. VERIFYING DEPENDENCIES"
echo "------------------------"

# Check Rust toolchain
if command_exists cargo; then
    log_pass "Cargo found: $(cargo --version)"
    
    # Check build
    if cargo check --all-features 2>/dev/null; then
        log_pass "Rust project builds successfully"
    else
        log_fail "Rust project build failed"
    fi
else
    log_fail "Cargo not found"
fi

# Check Node/npm
if command_exists npm; then
    log_pass "npm found: $(npm --version)"
    
    # Check frontend build
    if [ -d "mistersmith-monitoring-ui" ]; then
        cd mistersmith-monitoring-ui
        if npm list --depth=0 >/dev/null 2>&1; then
            log_pass "Frontend dependencies installed"
        else
            log_fail "Frontend dependencies missing"
        fi
        cd ..
    else
        log_warn "Frontend directory not found"
    fi
else
    log_fail "npm not found"
fi

# Check Docker
if command_exists docker; then
    log_pass "Docker found: $(docker --version | head -n1)"
    
    # Check services
    if docker-compose -f mistersmith-monitoring-ui/docker-compose.yml ps 2>/dev/null | grep -q "Up"; then
        log_pass "Docker services running"
    else
        log_warn "Some Docker services not running"
    fi
else
    log_fail "Docker not found"
fi

echo ""

# 2. EXTERNAL SERVICES VERIFICATION
echo "2. VERIFYING EXTERNAL SERVICES"
echo "------------------------------"

# Check NATS
if nc -zv localhost 4222 2>/dev/null; then
    log_pass "NATS server accessible on port 4222"
    
    # Test NATS functionality
    if command_exists nats; then
        if nats server check nats://localhost:4222 >/dev/null 2>&1; then
            log_pass "NATS server responding to health checks"
        else
            log_fail "NATS server not responding properly"
        fi
    else
        log_warn "NATS CLI not installed, skipping advanced checks"
    fi
else
    log_fail "NATS server not accessible"
fi

# Check PostgreSQL
if nc -zv localhost 5432 2>/dev/null; then
    log_pass "PostgreSQL accessible on port 5432"
    
    # Test database connection
    if command_exists psql; then
        if PGPASSWORD=mistersmith_dev psql -h localhost -U mistersmith_user -d mistersmith -c "SELECT 1;" >/dev/null 2>&1; then
            log_pass "PostgreSQL database connection successful"
            
            # Check schema
            TABLES=$(PGPASSWORD=mistersmith_dev psql -h localhost -U mistersmith_user -d mistersmith -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public';" 2>/dev/null | xargs)
            if [ "$TABLES" -gt 0 ]; then
                log_pass "Database schema initialized ($TABLES tables)"
            else
                log_warn "Database schema empty"
            fi
        else
            log_fail "PostgreSQL connection failed"
        fi
    else
        log_warn "psql not installed, skipping database checks"
    fi
else
    log_fail "PostgreSQL not accessible"
fi

# Check monitoring services
if curl -s http://localhost:16686 >/dev/null 2>&1; then
    log_pass "Jaeger UI accessible"
else
    log_warn "Jaeger UI not accessible"
fi

if curl -s http://localhost:8888 >/dev/null 2>&1; then
    log_pass "OpenTelemetry Collector metrics accessible"
else
    log_warn "OpenTelemetry Collector not accessible"
fi

echo ""

# 3. STATE MANAGEMENT VERIFICATION
echo "3. VERIFYING STATE MANAGEMENT"
echo "-----------------------------"

# Check Hive Mind
if [ -f ".hive-mind/hive.db" ]; then
    log_pass "Hive Mind database exists"
    
    if command_exists sqlite3; then
        QUEENS=$(sqlite3 .hive-mind/hive.db "SELECT COUNT(*) FROM queens;" 2>/dev/null || echo "0")
        log_info "Hive Mind queens: $QUEENS"
    fi
else
    log_warn "Hive Mind database not found"
fi

# Check MCP server
if curl -s http://localhost:8080/health >/dev/null 2>&1; then
    log_pass "MCP server health endpoint accessible"
    
    # Test JSON-RPC
    RESPONSE=$(curl -s -X POST http://localhost:8080/mcp \
        -H "Content-Type: application/json" \
        -d '{"jsonrpc":"2.0","method":"list_tools","id":1}' 2>/dev/null || echo "{}")
    
    if echo "$RESPONSE" | grep -q "result"; then
        log_pass "MCP JSON-RPC interface working"
    else
        log_fail "MCP JSON-RPC interface not responding"
    fi
else
    log_fail "MCP server not accessible"
fi

echo ""

# 4. INTEGRATION VERIFICATION
echo "4. VERIFYING INTEGRATIONS"
echo "-------------------------"

# Test NATS discovery flow
if command_exists nats && curl -s http://localhost:8080/health >/dev/null 2>&1; then
    log_info "Testing NATS discovery integration..."
    
    # Start subscriber in background
    nats sub "discoveries.>" --count=1 > /tmp/nats_test.log 2>&1 &
    NATS_PID=$!
    
    sleep 1
    
    # Share discovery
    curl -s -X POST http://localhost:8080/mcp \
        -H "Content-Type: application/json" \
        -d '{
            "jsonrpc":"2.0",
            "method":"share_discovery",
            "params":{
                "agent_id":"verify-test",
                "discovery_type":"verification",
                "content":"Phase 1 verification test",
                "confidence":1.0
            },
            "id":2
        }' >/dev/null 2>&1
    
    # Wait for message
    sleep 2
    kill $NATS_PID 2>/dev/null || true
    
    if grep -q "verification" /tmp/nats_test.log 2>/dev/null; then
        log_pass "NATS discovery integration working"
    else
        log_fail "NATS discovery integration not working"
    fi
    
    rm -f /tmp/nats_test.log
else
    log_warn "Skipping integration tests (services not available)"
fi

# Test SSE stream
if curl -s http://localhost:8080/discoveries/stream >/dev/null 2>&1; then
    log_pass "SSE discovery stream accessible"
else
    log_fail "SSE discovery stream not accessible"
fi

echo ""

# 5. CONFIGURATION VERIFICATION
echo "5. VERIFYING CONFIGURATION"
echo "--------------------------"

# Check configuration files
if [ -f "Cargo.toml" ]; then
    log_pass "Cargo.toml exists"
else
    log_fail "Cargo.toml not found"
fi

if [ -f ".hive-mind/config.json" ]; then
    if jq . .hive-mind/config.json >/dev/null 2>&1; then
        log_pass "Hive Mind config is valid JSON"
    else
        log_fail "Hive Mind config is invalid JSON"
    fi
else
    log_warn "Hive Mind config not found"
fi

# Check for hardcoded values
HARDCODED=$(grep -r "localhost\|127.0.0.1" src/ 2>/dev/null | grep -v test | wc -l || echo "0")
if [ "$HARDCODED" -eq 0 ]; then
    log_pass "No hardcoded localhost references"
else
    log_warn "Found $HARDCODED hardcoded localhost references"
fi

echo ""

# 6. SECURITY VERIFICATION
echo "6. VERIFYING SECURITY"
echo "---------------------"

# Check for authentication
if curl -s http://localhost:8080/agents 2>&1 | grep -q "Unauthorized"; then
    log_pass "API authentication enabled"
else
    log_fail "API authentication NOT enabled"
fi

# Check for hardcoded credentials
CREDS=$(grep -r "password\|secret" src/ 2>/dev/null | grep -v test | grep -v "//\|#" | wc -l || echo "0")
if [ "$CREDS" -eq 0 ]; then
    log_pass "No hardcoded credentials found"
else
    log_fail "Found $CREDS potential hardcoded credentials"
fi

echo ""

# 7. PERFORMANCE VERIFICATION
echo "7. VERIFYING PERFORMANCE"
echo "------------------------"

# Test HTTP endpoint latency
if command_exists ab; then
    log_info "Testing HTTP endpoint performance..."
    AB_RESULT=$(ab -n 100 -c 1 -g /dev/null http://localhost:8080/health 2>&1 | grep "Time per request" | head -1 | awk '{print $4}')
    if [ ! -z "$AB_RESULT" ]; then
        if (( $(echo "$AB_RESULT < 100" | bc -l) )); then
            log_pass "HTTP latency acceptable: ${AB_RESULT}ms average"
        else
            log_warn "HTTP latency high: ${AB_RESULT}ms average"
        fi
    fi
else
    log_warn "Apache Bench not installed, skipping performance tests"
fi

# Check resource usage
if command_exists ps; then
    MEM_USAGE=$(ps aux | grep -E "mistersmith|cargo" | grep -v grep | awk '{sum+=$6} END {print sum/1024}' || echo "0")
    log_info "Total memory usage: ${MEM_USAGE}MB"
fi

echo ""

# 8. AWS MIGRATION READINESS
echo "8. AWS MIGRATION READINESS"
echo "--------------------------"

# Check for AWS SDK
if grep -q "aws-" Cargo.toml 2>/dev/null; then
    log_pass "AWS SDK dependencies present"
else
    log_warn "AWS SDK dependencies not yet added"
fi

# Check environment variable usage
ENV_VARS=$(grep -r "env::" src/ 2>/dev/null | wc -l || echo "0")
if [ "$ENV_VARS" -gt 0 ]; then
    log_pass "Environment variables used ($ENV_VARS occurrences)"
else
    log_fail "No environment variable usage found"
fi

# Check for file system dependencies
FS_DEPS=$(grep -r "std::fs::\|tokio::fs::" src/ 2>/dev/null | grep -v test | grep -v migration | wc -l || echo "0")
if [ "$FS_DEPS" -eq 0 ]; then
    log_pass "No problematic file system dependencies"
else
    log_warn "Found $FS_DEPS file system dependencies to review"
fi

echo ""
echo "=========================================="
echo "VERIFICATION SUMMARY"
echo "=========================================="
echo -e "${GREEN}Passed${NC}: $PASSED"
echo -e "${RED}Failed${NC}: $FAILED"
echo -e "${YELLOW}Warnings${NC}: $WARNINGS"
echo ""

if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}✅ PHASE 1 VERIFICATION PASSED${NC}"
    echo "System is ready for Phase 2 planning"
    exit 0
else
    echo -e "${RED}❌ PHASE 1 VERIFICATION FAILED${NC}"
    echo "Please address the failed checks before proceeding"
    exit 1
fi