{
  "foundationFirstValidation": {
    "preImplementation": [
      {
        "check": "minimal_solution_identified",
        "required": true,
        "validation": "Has the simplest possible solution been identified?",
        "errorMessage": "Must identify minimal solution before proceeding"
      },
      {
        "check": "foundation_verified", 
        "required": true,
        "validation": "Is there a working foundation to build upon?",
        "errorMessage": "Foundation must be verified before enhancement"
      },
      {
        "check": "no_premature_optimization",
        "enforce": true,
        "validation": "Are we avoiding premature optimization?",
        "errorMessage": "Optimization detected before functional implementation"
      },
      {
        "check": "technical_debt_assessed",
        "required": false,
        "validation": "Has technical debt been acknowledged?",
        "warningMessage": "Consider documenting technical debt"
      }
    ],
    "duringImplementation": [
      {
        "check": "incremental_verification",
        "interval": "per_function",
        "validation": "Each function tested before moving to next",
        "automation": "cargo test {{function_name}}"
      },
      {
        "check": "technical_honesty",
        "validate": "limitations_documented",
        "patterns": [
          "// TODO: Current limitation",
          "// FIXME: Known issue", 
          "// NOTE: Simplified approach"
        ]
      },
      {
        "check": "minimal_dependencies",
        "threshold": 3,
        "validation": "New dependencies justified and minimal",
        "requireApproval": true
      }
    ],
    "postImplementation": [
      {
        "check": "working_foundation",
        "test": "integration_tests_pass",
        "command": "cargo test --test '*' -- --test-threads=1"
      },
      {
        "check": "no_overengineering",
        "metric": "complexity_score < 10",
        "tool": "cargo clippy -- -W clippy::cognitive_complexity"
      },
      {
        "check": "documentation_complete",
        "validation": "Public APIs documented",
        "command": "cargo doc --no-deps"
      }
    ],
    "agentBehaviors": {
      "Foundation-First Builder": {
        "priority": "minimal_working_implementation",
        "avoids": ["premature_abstraction", "over_configuration", "feature_creep"]
      },
      "Verification Engineer": {
        "validates": ["each_step_works", "no_regression", "maintains_simplicity"]
      },
      "Architecture Investigator": {
        "ensures": ["pattern_fits_context", "no_overarchitecting", "clear_boundaries"]
      }
    }
  }
}