{
  "deployment_sequence": {
    "phase_1_foundation": {
      "order": 1,
      "duration": "30 minutes",
      "steps": [
        {
          "step": 1,
          "service": "KMS",
          "action": "CreateKey",
          "description": "Create encryption key for all services",
          "dependencies": [],
          "rollback": "ScheduleKeyDeletion"
        },
        {
          "step": 2,
          "service": "VPC",
          "action": "CreateVpc",
          "description": "Create VPC with IPv6 support",
          "dependencies": ["KMS"],
          "rollback": "DeleteVpc"
        },
        {
          "step": 3,
          "service": "VPC",
          "action": "CreateInternetGateway",
          "description": "Create and attach internet gateway",
          "dependencies": ["VPC"],
          "rollback": "DeleteInternetGateway"
        },
        {
          "step": 4,
          "service": "VPC",
          "action": "CreateSubnet",
          "description": "Create public and private subnets",
          "dependencies": ["VPC"],
          "rollback": "DeleteSubnet",
          "parallel": true
        },
        {
          "step": 5,
          "service": "VPC",
          "action": "CreateNatGateway",
          "description": "Create NAT gateways in public subnets",
          "dependencies": ["Subnets", "ElasticIP"],
          "rollback": "DeleteNatGateway"
        },
        {
          "step": 6,
          "service": "VPC",
          "action": "CreateRouteTable",
          "description": "Create and configure route tables",
          "dependencies": ["NatGateway", "InternetGateway"],
          "rollback": "DeleteRouteTable"
        },
        {
          "step": 7,
          "service": "VPC",
          "action": "CreateSecurityGroup",
          "description": "Create security groups for all services",
          "dependencies": ["VPC"],
          "rollback": "DeleteSecurityGroup",
          "parallel": true
        }
      ]
    },
    "phase_2_compute_layer": {
      "order": 2,
      "duration": "20 minutes",
      "steps": [
        {
          "step": 8,
          "service": "ECR",
          "action": "CreateRepository",
          "description": "Create ECR repositories for containers",
          "dependencies": ["KMS"],
          "rollback": "DeleteRepository",
          "parallel": true
        },
        {
          "step": 9,
          "service": "IAM",
          "action": "CreateRole",
          "description": "Create all IAM roles",
          "dependencies": [],
          "rollback": "DeleteRole",
          "parallel": true
        },
        {
          "step": 10,
          "service": "SecretsManager",
          "action": "CreateSecret",
          "description": "Create secrets for credentials",
          "dependencies": ["KMS"],
          "rollback": "DeleteSecret",
          "parallel": true
        },
        {
          "step": 11,
          "service": "ECS",
          "action": "CreateCluster",
          "description": "Create ECS cluster with capacity providers",
          "dependencies": [],
          "rollback": "DeleteCluster"
        },
        {
          "step": 12,
          "service": "CloudWatch",
          "action": "CreateLogGroup",
          "description": "Create log groups for all services",
          "dependencies": ["KMS"],
          "rollback": "DeleteLogGroup",
          "parallel": true
        }
      ]
    },
    "phase_3_data_layer": {
      "order": 3,
      "duration": "45 minutes",
      "steps": [
        {
          "step": 13,
          "service": "RDS",
          "action": "CreateDBSubnetGroup",
          "description": "Create subnet group for Aurora",
          "dependencies": ["Subnets"],
          "rollback": "DeleteDBSubnetGroup"
        },
        {
          "step": 14,
          "service": "RDS",
          "action": "CreateDBCluster",
          "description": "Create Aurora Serverless v2 cluster",
          "dependencies": ["DBSubnetGroup", "SecurityGroups", "KMS"],
          "rollback": "DeleteDBCluster"
        },
        {
          "step": 15,
          "service": "RDS",
          "action": "CreateDBInstance",
          "description": "Create Aurora instances",
          "dependencies": ["DBCluster"],
          "rollback": "DeleteDBInstance",
          "parallel": true
        },
        {
          "step": 16,
          "service": "RDS",
          "action": "CreateDBProxy",
          "description": "Create RDS Proxy for connection pooling",
          "dependencies": ["DBCluster", "Secrets", "IAMRoles"],
          "rollback": "DeleteDBProxy"
        },
        {
          "step": 17,
          "service": "DynamoDB",
          "action": "CreateTable",
          "description": "Create DynamoDB tables",
          "dependencies": ["KMS"],
          "rollback": "DeleteTable",
          "parallel": true
        },
        {
          "step": 18,
          "service": "S3",
          "action": "CreateBucket",
          "description": "Create S3 buckets for storage",
          "dependencies": ["KMS"],
          "rollback": "DeleteBucket"
        }
      ]
    },
    "phase_4_messaging_layer": {
      "order": 4,
      "duration": "15 minutes",
      "steps": [
        {
          "step": 19,
          "service": "EventBridge",
          "action": "CreateEventBus",
          "description": "Create custom event bus",
          "dependencies": [],
          "rollback": "DeleteEventBus"
        },
        {
          "step": 20,
          "service": "SQS",
          "action": "CreateQueue",
          "description": "Create SQS queues",
          "dependencies": ["KMS"],
          "rollback": "DeleteQueue",
          "parallel": true
        },
        {
          "step": 21,
          "service": "EventBridge",
          "action": "PutRule",
          "description": "Create event routing rules",
          "dependencies": ["EventBus"],
          "rollback": "DeleteRule",
          "parallel": true
        },
        {
          "step": 22,
          "service": "EventBridge",
          "action": "PutTargets",
          "description": "Configure event targets",
          "dependencies": ["Rules", "SQS"],
          "rollback": "RemoveTargets"
        }
      ]
    },
    "phase_5_application_layer": {
      "order": 5,
      "duration": "30 minutes",
      "steps": [
        {
          "step": 23,
          "service": "ELBv2",
          "action": "CreateLoadBalancer",
          "description": "Create Application Load Balancer",
          "dependencies": ["Subnets", "SecurityGroups"],
          "rollback": "DeleteLoadBalancer"
        },
        {
          "step": 24,
          "service": "ELBv2",
          "action": "CreateTargetGroup",
          "description": "Create target groups",
          "dependencies": ["VPC"],
          "rollback": "DeleteTargetGroup",
          "parallel": true
        },
        {
          "step": 25,
          "service": "ACM",
          "action": "RequestCertificate",
          "description": "Request SSL certificate",
          "dependencies": [],
          "rollback": "DeleteCertificate"
        },
        {
          "step": 26,
          "service": "ELBv2",
          "action": "CreateListener",
          "description": "Create ALB listeners",
          "dependencies": ["ALB", "TargetGroups", "Certificate"],
          "rollback": "DeleteListener"
        },
        {
          "step": 27,
          "service": "ECS",
          "action": "RegisterTaskDefinition",
          "description": "Register task definitions",
          "dependencies": ["ECR", "IAMRoles"],
          "rollback": "DeregisterTaskDefinition",
          "parallel": true
        },
        {
          "step": 28,
          "service": "ECS",
          "action": "CreateService",
          "description": "Create ECS services",
          "dependencies": ["TaskDefinitions", "TargetGroups", "Cluster"],
          "rollback": "DeleteService"
        },
        {
          "step": 29,
          "service": "ApplicationAutoScaling",
          "action": "RegisterScalableTarget",
          "description": "Configure auto-scaling",
          "dependencies": ["ECSServices"],
          "rollback": "DeregisterScalableTarget"
        },
        {
          "step": 30,
          "service": "ApplicationAutoScaling",
          "action": "PutScalingPolicy",
          "description": "Create scaling policies",
          "dependencies": ["ScalableTargets"],
          "rollback": "DeleteScalingPolicy"
        }
      ]
    },
    "phase_6_dns_monitoring": {
      "order": 6,
      "duration": "20 minutes",
      "steps": [
        {
          "step": 31,
          "service": "Route53",
          "action": "CreateHostedZone",
          "description": "Create hosted zone",
          "dependencies": [],
          "rollback": "DeleteHostedZone"
        },
        {
          "step": 32,
          "service": "Route53",
          "action": "ChangeResourceRecordSets",
          "description": "Create DNS records",
          "dependencies": ["HostedZone", "ALB"],
          "rollback": "ChangeResourceRecordSets"
        },
        {
          "step": 33,
          "service": "CloudWatch",
          "action": "PutMetricAlarm",
          "description": "Create CloudWatch alarms",
          "dependencies": ["SNSTopic"],
          "rollback": "DeleteAlarms",
          "parallel": true
        },
        {
          "step": 34,
          "service": "CloudWatch",
          "action": "PutDashboard",
          "description": "Create monitoring dashboard",
          "dependencies": [],
          "rollback": "DeleteDashboard"
        },
        {
          "step": 35,
          "service": "VPC",
          "action": "CreateVpcEndpoint",
          "description": "Create VPC endpoints",
          "dependencies": ["Subnets", "SecurityGroups"],
          "rollback": "DeleteVpcEndpoint",
          "parallel": true
        }
      ]
    }
  },
  "rollback_strategy": {
    "automatic_rollback": true,
    "rollback_order": "reverse",
    "preserve_data": true,
    "notification_channels": ["SNS", "Slack"],
    "manual_approval_required": false
  },
  "validation_checkpoints": {
    "after_foundation": ["VPC connectivity", "Security group rules"],
    "after_compute": ["ECS cluster health", "IAM permissions"],
    "after_data": ["Database connectivity", "Proxy health"],
    "after_messaging": ["Event flow", "Queue accessibility"],
    "after_application": ["Service health", "Load balancer routing"],
    "after_dns": ["DNS resolution", "SSL validation"]
  }
}